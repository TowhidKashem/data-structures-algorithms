Binary Heaps:

We can use a Binary Tree data structure to represent a Binary Heap but an easier way is to use an array since it's built in:

                    10
                19      36
             17     12       5

   myHeap = [10, 19, 36, 17, 12, 5]

   indices: [0,  1,  2,  3,  4,  5]

******************

Formula to find the children of a node in the array (n = index of the node):

    left child  = 2n + 1
    right child = 2n + 2

******************

the children of '10' are '19' and '36' because:

    left node:
        10 = 0 index
        2 * 0 = 0 
        0 + 1 = 1 index

    right node:
        10 = 0 index
        2 * 0 = 0
        0 + 2 = 2 index

    myHeap[1] = '19'
    myHeap[2] = '36'

the children of '19' are '17' and '12':

    left node:
        19 = 1 index
        2 * 1 = 2
        2 + 1 = 3 index

    right node:
        19 = 1 index
        2 * 1 = 2
        2 + 2 = 4 index

    myHeap[3] = '17'
    myHeap[4] = '12'


******************

Formula to find the parent of a node (n = index of the node):

    (n - 1) / 2 floored

******************

Find the parent of '17':

    myHeap[3] = 17

    (3 index - 1) = 2 / 2 = 1

    myHeap[1] = 19

Find the parent of '12':

    myHeap[4] = 12

    (4 index - 1) = 3 / 2 = 1.5 -> floor -> 1

    myHeap[1] = 19


-------------------------------------------------------------------------------------------------------------

Notes:

    - same as a Binary Search Trees in structure, just differs in the rules of ordering
        - there is no left to right relationships, only up and down
            - but we still insert going from left to right
        - binary = each parent has at most 2 nodes

    - used in algorithms where order is important (e.g. "Priority Queues", sorting algorithms, data storage)

        - e.g. let's say we have a Max Binary Heap where the values are the ages of all children in a school
          and we need to grab all kids above the age of 10, in a Binary Heap this is easy, we just need to traverse the
          tree and grab nodes until we get to a value of 10 or greater and then we just stop
            - in a BST, array or object this would be a O(n) operation

Complexity:

    - lookups are O(n) unlike BSTs which are O(log n) on average
        - this is because the rules of ordering are more strict in BSTs than in heaps hence there are more nodes to check
    - while searching a Binary Heap is slower than a BST but it's useful because it tracks priority relationships between nodes

---

Max Binary Heap:

    - parent nodes are always LARGER than the children
        - every level will have values doing down

Min Binary Heap:

    - parent nodes are always SMALLER than the children
        - every level will have values going up

---

Priority Queue:

    - like a typical queue that's used to hold things except we can also assign priority to the items

    - differs from binary heaps in that left and right relationships exist
        - the left node has higher priority than the right node
            - e.g. priority queue to get into an airplane (pilot > stewardess > passengers):
                https://i.imgur.com/NqO4ncq.jpg

